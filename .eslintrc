{
  //   ╔═╗╔═╗╦  ╦╔╗╔╔╦╗┬─┐┌─┐
  //   ║╣ ╚═╗║  ║║║║ ║ ├┬┘│
  //  o╚═╝╚═╝╩═╝╩╝╚╝ ╩ ┴└─└─┘
  // A set of basic code conventions designed to encourage quality and consistency
  // across your Sails app's code base.  These rules are checked against
  // automatically any time you run `npm test`.
  //
  // > An additional eslintrc override file is included in the `assets/` folder
  // > right out of the box.  This is specifically to allow for variations in acceptable
  // > global variables between front-end JavaScript code designed to run in the browser
  // > vs. backend code designed to run in a Node.js/Sails process.
  //
  // > Note: If you're using mocha, you'll want to add an extra override file to your
  // > `test/` folder so that eslint will tolerate mocha-specific globals like `before`
  // > and `describe`.
  // Designed for ESLint v4.
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // For more information about any of the rules below, check out the relevant
  // reference page on eslint.org.  For example, to get details on "no-sequences",
  // you would visit `http://eslint.org/docs/rules/no-sequences`.  If you're unsure
  // or could use some advice, come by https://sailsjs.com/support.
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  "env": {
    "node": true,
    "browser": true,
    "es6": true
  },

  "extends": [
    "eslint:recommended",
    "prettier"
  ],

  "plugins": [
    "prettier"
  ],

  // "parser": "",
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module",
    "ecmaFeatures": {
      "experimentalObjectRestSpread": true
    }
  },

  "globals": {
    // If "no-undef" is enabled below, be sure to list all global variables that
    // are used in this app's backend code (including the globalIds of models):
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    "Promise": true,
    "sails": true,
    "_": true,
    // …and any others (e.g. `"Organization": true`)
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    "angular": true
  },

  "rules": {
    "handle-callback-err":          ["error"],
    "linebreak-style":              ["error", "unix"],
    "no-dupe-keys":                 ["error"],
    "no-duplicate-case":            ["error"],
    "no-labels":                    ["error"],
    
    "no-redeclare":                 ["warn"],
    "no-return-assign":             ["error", "always"],
    "no-sequences":                 ["error"],
    "no-trailing-spaces":           ["warn"],
    "no-undef":                     ["off"],
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // ^^Note: If this "no-undef" rule is enabled (set to `["error"]`), then all model globals
    // (e.g. `"Organization": true`) should be included above under "globals".
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    "no-unexpected-multiline":      ["warn"],
    "no-unreachable":               ["warn"],
    "no-unused-vars":               ["warn", {
      "caughtErrors":               "all",
      "caughtErrorsIgnorePattern":  "^unused($|[A-Z].*$)",
      "argsIgnorePattern":          "^_(.*$)",
      "varsIgnorePattern":          "^_(.*$)"
    }],
    "no-use-before-define":         ["error", {"functions":false}],
    "one-var":                      ["warn", "never"],
    "rest-spread-spacing":          ["warn"],
    "prefer-spread":                ["warn"],
    
    // Personal Prettier-like rules
    "prettier/prettier":            ["error"],
    "comma-dangle":                 ["warn"],
    "comma-style":                  ["warn", "last"],
    "arrow-parens":                 ["error"],
    "arrow-spacing":                ["error"],
    "arrow-body-style":             ["error"],
    "prefer-arrow-callback":        ["warn", { "allowNamedFunctions": true }],
    "quotes":                       ["error", "single", { "avoidEscape": false, "allowTemplateLiterals": true }],
    "jsx-quotes":                   ["error", "prefer-single"],
    "semi":                         ["error", "never"],
    "semi-spacing":                 ["warn", { "before": false, "after": true }],
    "semi-style":                   ["warn", "first"],
    "no-extra-semi":                ["warn"],
    "no-mixed-spaces-and-tabs":     [2, "smart-tabs"],
    "no-console":                   ["warn"],
    "block-scoped-var":             ["error"],
    "callback-return":              ["error", ["done", "proceed", "next", "onwards", "callback", "cb"]],
    "camelcase":                    ["warn", {"properties":"always"}],
    "curly":                        ["warn"],
    "eqeqeq":                       ["error", "always"],
    "eol-last":                     ["warn"],
    "indent":                       ["warn", 2, {
      "SwitchCase": 1,
      "MemberExpression": "off",
      "FunctionDeclaration": {"body":1, "parameters":"off"},
      "FunctionExpression": {"body":1, "parameters":"off"},
      "CallExpression": {"arguments":"off"},
      "ArrayExpression": 1,
      "ObjectExpression": 1,
      "ignoredNodes": ["ConditionalExpression"]
    }],
    "max-len": ["error", {
      "code": 100,
      "tabWidth": 2,
      "comments": 120, // enforces a maximum line length for comments; defaults to value of code
      "ignorePattern": "", // ignores lines matching a regular expression; can only match a single line and need to be double escaped when written in YAML or JSON
      // // "ignoreComments": true, //  ignores all trailing comments and comments on their own line
      "ignoreTrailingComments": true, // ignores only trailing comments
      "ignoreUrls": true, // ignores lines that contain a URL
      "ignoreStrings": false, // ignores lines that contain a double-quoted or single-quoted string
      "ignoreTemplateLiterals": false, // ignores lines that contain a template literal
      "ignoreRegExpLiterals": true //  ignores lines that contain a RegExp literal
    }]
  }
}
